@page "/chatbox"
@using System.Net.Http.Json
@using System.Text.Json
@rendermode InteractiveWebAssembly
@inject HttpClient Http

<PageTitle>ChatGPT Chatbox</PageTitle>

<div class="chatbox-container">
    <h1>ChatGPT Chatbox with Azure Search</h1>

    <div class="conversation-info">
        <div class="info-item">
            <strong>Conversation ID:</strong> <span class="conversation-id">@conversationId</span>
        </div>
        <div class="info-item">
            <strong>Questions:</strong> <span class="question-count">@questionCount / @maxQuestions</span>
        </div>
        <div class="action-buttons">
            <button class="btn btn-secondary btn-sm" @onclick="NewConversation">New Conversation</button>
            <button class="btn btn-warning btn-sm" @onclick="ResetConversation">Reset</button>
        </div>
    </div>

    <div class="chat-messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="message @message.Type">
                <div class="message-header">
                    <strong>@(message.Type == "user" ? "You" : "Assistant")</strong>
                    <span class="timestamp">@message.Timestamp.ToString("HH:mm:ss")</span>
                </div>
                <div class="message-content">@message.Content</div>
                @if (message.Citations != null && message.Citations.Count > 0)
                {
                    <div class="citations">
                        <strong>Sources:</strong>
                        <ul>
                            @foreach (var citation in message.Citations)
                            {
                                <li>
                                    <strong>@citation.Title</strong> - @citation.FilePath (Score: @citation.Score.ToString("F4"))
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
        @if (isLoading)
        {
            <div class="message assistant loading">
                <div class="message-content">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Processing...
                </div>
            </div>
        }
    </div>

    <div class="input-section">
        <div class="input-mode-selector">
            <label>
                <input type="radio" name="mode" value="single" checked="@(inputMode == "single")" @onchange='() => inputMode = "single"' />
                Single Question
            </label>
            <label>
                <input type="radio" name="mode" value="multiple" checked="@(inputMode == "multiple")" @onchange='() => inputMode = "multiple"' />
                Multiple Questions
            </label>
        </div>

        @if (inputMode == "single")
        {
            <div class="single-question-input">
                <textarea class="form-control" 
                          placeholder="Enter your question..." 
                          @bind="currentQuestion" 
                          @bind:event="oninput"
                          rows="3"
                          disabled="@isLoading"></textarea>
                <button class="btn btn-primary" @onclick="AskSingleQuestion" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentQuestion))">
                    Send Question
                </button>
            </div>
        }
        else
        {
            <div class="multiple-questions-input">
                <div class="questions-list">
                    @for (int i = 0; i < multipleQuestions.Count; i++)
                    {
                        var index = i;
                        <div class="question-item">
                            <input type="text" 
                                   class="form-control" 
                                   placeholder="@($"Question {index + 1}")" 
                                   @bind="multipleQuestions[index]" 
                                   @bind:event="oninput"
                                   disabled="@isLoading" />
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveQuestion(index)" disabled="@isLoading">Ã—</button>
                        </div>
                    }
                </div>
                <div class="multiple-actions">
                    <button class="btn btn-secondary btn-sm" @onclick="AddQuestion" disabled="@isLoading">Add Question</button>
                    <button class="btn btn-primary" @onclick="AskMultipleQuestions" disabled="@(isLoading || !multipleQuestions.Any(q => !string.IsNullOrWhiteSpace(q)))">
                        Send All Questions
                    </button>
                </div>
            </div>
        }
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick='() => errorMessage = ""'></button>
        </div>
    }
</div>

@code {
    private ElementReference messagesContainer;
    private string conversationId = "";
    private int questionCount = 0;
    private int maxQuestions = 10;
    private string inputMode = "single";
    private string currentQuestion = "";
    private List<string> multipleQuestions = new List<string> { "" };
    private List<ChatMessage> messages = new List<ChatMessage>();
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadConversationInfo();
    }

    private async Task LoadConversationInfo()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ConversationInfoResponse>("/api/chat/conversation-info");
            if (response != null)
            {
                conversationId = response.ConversationId ?? "";
                questionCount = response.QuestionCount;
                maxQuestions = response.MaxQuestions;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading conversation info: {ex.Message}";
        }
    }

    private async Task AskSingleQuestion()
    {
        if (string.IsNullOrWhiteSpace(currentQuestion))
            return;

        isLoading = true;
        errorMessage = "";

        try
        {
            var userQuestion = currentQuestion.Trim();
            messages.Add(new ChatMessage { Type = "user", Content = userQuestion, Timestamp = DateTime.Now });
            currentQuestion = "";

            var request = new { Question = userQuestion };
            var response = await Http.PostAsJsonAsync("/api/chat/ask", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChatGptResponse>();
                if (result?.Answers != null && result.Answers.Count > 0)
                {
                    var answer = result.Answers[0];
                    messages.Add(new ChatMessage 
                    { 
                        Type = "assistant", 
                        Content = answer.Answer ?? "", 
                        Citations = answer.Citations,
                        Timestamp = DateTime.Now 
                    });
                    await LoadConversationInfo();
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = error?.Error ?? "An error occurred.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AskMultipleQuestions()
    {
        var validQuestions = multipleQuestions.Where(q => !string.IsNullOrWhiteSpace(q)).Select(q => q.Trim()).ToList();
        
        if (validQuestions.Count == 0)
            return;

        isLoading = true;
        errorMessage = "";

        try
        {
            foreach (var question in validQuestions)
            {
                messages.Add(new ChatMessage { Type = "user", Content = question, Timestamp = DateTime.Now });
            }
            multipleQuestions = new List<string> { "" };

            var request = new { Questions = validQuestions };
            var response = await Http.PostAsJsonAsync("/api/chat/ask-multiple", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChatGptResponse>();
                if (result?.Answers != null)
                {
                    foreach (var answer in result.Answers)
                    {
                        messages.Add(new ChatMessage 
                        { 
                            Type = "assistant", 
                            Content = answer.Answer ?? "", 
                            Citations = answer.Citations,
                            Timestamp = DateTime.Now 
                        });
                    }
                    await LoadConversationInfo();
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = error?.Error ?? "An error occurred.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task NewConversation()
    {
        try
        {
            var response = await Http.PostAsync("/api/chat/new-conversation", null);
            if (response.IsSuccessStatusCode)
            {
                messages.Clear();
                await LoadConversationInfo();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task ResetConversation()
    {
        try
        {
            var response = await Http.PostAsync("/api/chat/reset", null);
            if (response.IsSuccessStatusCode)
            {
                messages.Clear();
                await LoadConversationInfo();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void AddQuestion()
    {
        multipleQuestions.Add("");
    }

    private void RemoveQuestion(int index)
    {
        if (multipleQuestions.Count > 1)
        {
            multipleQuestions.RemoveAt(index);
        }
    }

    private class ChatMessage
    {
        public string Type { get; set; } = "";
        public string Content { get; set; } = "";
        public List<DocumentCitation>? Citations { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private class ChatGptResponse
    {
        public string? ConversationId { get; set; }
        public List<ChatGptAnswer>? Answers { get; set; }
    }

    private class ChatGptAnswer
    {
        public string? Question { get; set; }
        public string? Answer { get; set; }
        public List<DocumentCitation>? Citations { get; set; }
    }

    private class DocumentCitation
    {
        public string? Title { get; set; }
        public string? FilePath { get; set; }
        public float Score { get; set; }
        public string? Content { get; set; }
    }

    private class ConversationInfoResponse
    {
        public string? ConversationId { get; set; }
        public int QuestionCount { get; set; }
        public int MaxQuestions { get; set; }
        public string? Message { get; set; }
    }

    private class ErrorResponse
    {
        public string? Error { get; set; }
    }
}
